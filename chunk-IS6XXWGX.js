import{c as S,d as v,l as I,r as l}from"./chunk-5DCULCAW.js";import{B as d,S as b,Y as w,a as h,b as f,ba as g,j as k,n as p,o as a,r as U}from"./chunk-PUOMKCPY.js";var c=class extends Error{};c.prototype.name="InvalidTokenError";function O(s){return decodeURIComponent(atob(s).replace(/(.)/g,(e,t)=>{let r=t.charCodeAt(0).toString(16).toUpperCase();return r.length<2&&(r="0"+r),"%"+r}))}function N(s){let e=s.replace(/-/g,"+").replace(/_/g,"/");switch(e.length%4){case 0:break;case 2:e+="==";break;case 3:e+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return O(e)}catch{return atob(e)}}function y(s,e){if(typeof s!="string")throw new c("Invalid token specified: must be a string");e||(e={});let t=e.header===!0?0:1,r=s.split(".")[t];if(typeof r!="string")throw new c(`Invalid token specified: missing part #${t+1}`);let o;try{o=N(r)}catch(n){throw new c(`Invalid token specified: invalid base64 for part #${t+1} (${n.message})`)}try{return JSON.parse(o)}catch(n){throw new c(`Invalid token specified: invalid json for part #${t+1} (${n.message})`)}}var j=class s{constructor(e,t){this.http=e;this.router=t;let r=localStorage.getItem("currentUser");r&&r!=="undefined"&&this.currentUserSubject.next(JSON.parse(r)),console.log("Stored user:",r),this.initMockData()}baseUrl=l.apiUrl;currentUserSubject=new k(null);mockUsers=[];mockTokens={};currentUser$=this.currentUserSubject.asObservable();get currentUserValue(){return this.currentUserSubject.value}isAuthenticated(){return!!this.currentUserValue}login(e){let{email:t,password:r}=e;if(l.useMockData)return this.mockLogin(e);{let o=new S().set("email",t).set("password",r),n=`${this.baseUrl}/login`;return console.log("Sending login request with HttpParams:",o.toString()),this.http.post(n,null,{params:o,responseType:"text"}).pipe(U(m=>{localStorage.setItem("token",m);let i=y(m),u={id:i.id??0,username:i.username??"",email:i.email??i.sub,name:i.name??i.name,lastName:i.lastName||"",status:i.status??!0};return console.log("Decoded payload:",i),console.log("User to be stored:",u),localStorage.setItem("currentUser",JSON.stringify(u)),this.currentUserSubject.next(u),u}),d(m=>(console.error("Login failed with API",m),a(()=>new Error("Login failed. Please check your credentials.")))))}}register(e){if(console.log("Using mock data?",l.useMockData),l.useMockData)return this.mockRegister(e);{let t=f(h({},e),{status:e.status!==void 0?e.status:!0});return this.http.post(`${this.baseUrl}/register`,t).pipe(b(()=>this.login({email:e.email,password:e.password})),d(r=>(console.error("Registration error wtih API",r),a(()=>new Error("Registration failed. Please try again.")))))}}logout(){localStorage.removeItem("token"),localStorage.removeItem("currentUser"),this.currentUserSubject.next(null),console.log("Stored token deleted."),this.router.navigate(["/authentaction"])}mockLogin(e){let t=this.mockUsers.find(n=>n.email===e.email);if(!t)return a(()=>new Error("User not found. Please register first."));if(JSON.parse(localStorage.getItem("mockPasswords")||"{}")[t.id]!==e.password)return a(()=>new Error("Invalid password."));let o=`mock-token-${Date.now()}`;return this.mockTokens[t.id]=o,localStorage.setItem("token",o),localStorage.setItem("currentUser",JSON.stringify(t)),this.currentUserSubject.next(t),p(t)}mockRegister(e){if(this.mockUsers.some(n=>n.email===e.email))return a(()=>new Error("Email already registered."));if(e.username&&this.mockUsers.some(n=>n.username===e.username))return a(()=>new Error("Email already registered."));let t={id:this.mockUsers.length+1,username:e.username||"",email:e.email,name:e.name||"",lastName:e.lastName||"",status:e.status!==void 0?e.status:!0},r=JSON.parse(localStorage.getItem("mockPasswords")||"{}");r[t.id]=e.password,localStorage.setItem("mockPasswords",JSON.stringify(r)),this.mockUsers.push(t),localStorage.setItem("mockUsers",JSON.stringify(this.mockUsers));let o=`mock-token-${Date.now()}`;return this.mockTokens[t.id]=o,localStorage.setItem("token",o),localStorage.setItem("currentUser",JSON.stringify(t)),this.currentUserSubject.next(t),p(t)}initMockData(){if(l.useMockData){let e=localStorage.getItem("mockUsers");e&&(this.mockUsers=JSON.parse(e))}}getToken(){return localStorage.getItem("token")}static \u0275fac=function(t){return new(t||s)(g(v),g(I))};static \u0275prov=w({token:s,factory:s.\u0275fac,providedIn:"root"})};export{j as a};
